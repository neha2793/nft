const o = {
  TRANSACTION_RAN_OUT_OF_GAS: "TRANSACTION_RAN_OUT_OF_GAS",
  TRANSACTION_UNDERPRICED: "TRANSACTION_UNDERPRICED",
  REJECTED_TRANSACTION: "REJECTED_TRANSACTION",
  CALL_REVERTED: "CALL_REVERTED",
  EXECUTION_REVERTED: "EXECUTION_REVERTED",
  NONCE_TOO_LOW: "NONCE_TOO_LOW",
  INSUFFICIENT_FUNDS_FOR_GAS: "INSUFFICIENT_FUNDS_FOR_GAS",
  MAX_PRIORITY_FEE_PER_GAS_HIGHER_THAN_MAX_FEE_PER_GAS: "MAX_PRIORITY_FEE_PER_GAS_HIGHER_THAN_MAX_FEE_PER_GAS",
  MAX_FEE_PER_GAS_LESS_THAN_BLOCK_BASE_FEE: "MAX_FEE_PER_GAS_LESS_THAN_BLOCK_BASE_FEE",
  UNKNOWN_ERROR: "UNKNOWN_ERROR"
}, i = {
  NONCE_EXPIRED: "NONCE_EXPIRED",
  UNPREDICTABLE_GAS_LIMIT: "UNPREDICTABLE_GAS_LIMIT",
  ACTION_REJECTED: "ACTION_REJECTED",
  CALL_EXCEPTION: "CALL_EXCEPTION"
}, R = {
  REJECTED_TRANSACTION: 4001,
  REQUIRE_TRANSACTION: -32603,
  ERROR_WHILE_FORMATTING_OUTPUT_FROM_RPC: -32603,
  TRANSACTION_UNDERPRICED: -32e3
};
function n(e, r) {
  var _;
  if (e !== R.ERROR_WHILE_FORMATTING_OUTPUT_FROM_RPC)
    return;
  const E = (_ = r.split("RPC '")[1]) == null ? void 0 : _.slice(0, -1);
  if (E !== void 0)
    try {
      const t = JSON.parse(E);
      if (t.value === void 0 || t.value.data === void 0)
        return;
      if (t.value.data.code === R.TRANSACTION_UNDERPRICED)
        return {
          errorCode: o.TRANSACTION_UNDERPRICED,
          context: void 0
        };
    } catch {
      return;
    }
}
function N(e) {
  const r = e.code, E = e.message;
  if (r !== void 0) {
    if (E !== void 0) {
      const _ = n(r, E);
      if (_ !== void 0)
        return _;
    }
    if (r === R.REJECTED_TRANSACTION)
      return {
        errorCode: o.REJECTED_TRANSACTION,
        context: E
      };
    if (r === R.REQUIRE_TRANSACTION && E !== void 0 && E.includes("execution reverted: "))
      return {
        errorCode: o.EXECUTION_REVERTED,
        context: E.slice(20)
      };
  }
}
function d(e) {
  if (e.code === i.UNPREDICTABLE_GAS_LIMIT) {
    if (e.error !== void 0 && e.error.code === R.REQUIRE_TRANSACTION && e.error.data !== void 0 && e.error.data.message !== void 0) {
      const r = e.error.data.message;
      if (r.includes("execution reverted: "))
        return {
          errorCode: o.EXECUTION_REVERTED,
          context: r.slice(20)
        };
    }
    if (e.error !== void 0 && e.error.error !== void 0 && e.error.error.error !== void 0 && e.error.error.error.code === R.TRANSACTION_UNDERPRICED && e.error.error.body !== void 0)
      try {
        const r = JSON.parse(e.error.error.body);
        if (r.error !== void 0 && r.error.message !== void 0) {
          if (r.error.message.includes("gas required exceeds allowance (0)"))
            return {
              errorCode: o.INSUFFICIENT_FUNDS_FOR_GAS,
              context: void 0
            };
          if (r.error.message.includes("max priority fee per gas higher than max fee per gas"))
            return {
              errorCode: o.MAX_PRIORITY_FEE_PER_GAS_HIGHER_THAN_MAX_FEE_PER_GAS,
              context: void 0
            };
          if (r.error.message.includes("max fee per gas less than block base fee"))
            return {
              errorCode: o.MAX_FEE_PER_GAS_LESS_THAN_BLOCK_BASE_FEE,
              context: void 0
            };
        }
      } catch {
        return;
      }
  }
}
function T(e) {
  if (e.code === i.NONCE_EXPIRED && e.transaction !== void 0)
    return {
      errorCode: o.NONCE_TOO_LOW,
      context: e.transaction.nonce.toString()
    };
  if (e.code === i.ACTION_REJECTED && e.action === "sendTransaction")
    return {
      errorCode: o.REJECTED_TRANSACTION,
      context: e.message
    };
  if (e.code === i.CALL_EXCEPTION && e.reason !== void 0)
    return {
      errorCode: o.CALL_REVERTED,
      context: e.reason
    };
  const r = d(e);
  if (r !== void 0)
    return r;
}
function C(e) {
  const r = e, E = e.error, _ = T(r);
  if (_ !== void 0)
    return _;
  if (E !== void 0) {
    const t = N(E);
    if (t !== void 0)
      return t;
  }
  if (r.transaction !== void 0 && r.receipt !== void 0) {
    const t = r.transaction.gasLimit;
    if (r.receipt.gasUsed.gte(t))
      return {
        errorCode: o.TRANSACTION_RAN_OUT_OF_GAS,
        context: r.transaction.gasLimit.toString()
      };
  }
  return e.error !== void 0 && e.error.message !== void 0 ? {
    errorCode: o.UNKNOWN_ERROR,
    context: e.error.message
  } : r.code !== void 0 ? {
    errorCode: o.UNKNOWN_ERROR,
    context: r.code.toString()
  } : {
    errorCode: o.UNKNOWN_ERROR,
    context: void 0
  };
}
export {
  o as RETURN_VALUE_ERROR_CODES,
  C as getParsedEthersError
};
